// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bfi_Common_ListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var currentPage: Int32 = 0

  var perPage: Int32 = 0

  var filter: Dictionary<String,String> = [:]

  var order: Dictionary<String,String> = [:]

  var exportType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_GetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_Empty {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_Request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uniqueIdentifier: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_DetectChannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var detectChannel: Bfi_Common_Request {
    get {return _detectChannel ?? Bfi_Common_Request()}
    set {_detectChannel = newValue}
  }
  /// Returns true if `detectChannel` has been explicitly set.
  var hasDetectChannel: Bool {return self._detectChannel != nil}
  /// Clears the value of `detectChannel`. Subsequent reads from it will return its default value.
  mutating func clearDetectChannel() {self._detectChannel = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _detectChannel: Bfi_Common_Request? = nil
}

struct Bfi_Common_Response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Int32 = 0

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_MobileCommonResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Int32 = 0

  var message: String = String()

  var registerDevice: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_Pagination {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var currentPage: Int32 = 0

  var totalItem: Int32 = 0

  var totalPage: Int32 = 0

  var perPage: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_Meta {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pagination: Bfi_Common_Pagination {
    get {return _pagination ?? Bfi_Common_Pagination()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var response: Bfi_Common_Response {
    get {return _response ?? Bfi_Common_Response()}
    set {_response = newValue}
  }
  /// Returns true if `response` has been explicitly set.
  var hasResponse: Bool {return self._response != nil}
  /// Clears the value of `response`. Subsequent reads from it will return its default value.
  mutating func clearResponse() {self._response = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Bfi_Common_Pagination? = nil
  fileprivate var _response: Bfi_Common_Response? = nil
}

struct Bfi_Common_ApproveRejectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: [String] = []

  var action: String = String()

  var remarks: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_SingleApproveRejectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String = String()

  var action: String = String()

  var remarks: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_ApproveRejectBatchRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var batchID: String = String()

  var action: String = String()

  var remarks: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_DropdownRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var filter: Dictionary<String,String> = [:]

  var order: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_DetailRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var filter: Dictionary<String,String> = [:]

  var order: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_DropdownDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_DropdownResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: [Bfi_Common_DropdownDetail] = []

  var response: Bfi_Common_Response {
    get {return _response ?? Bfi_Common_Response()}
    set {_response = newValue}
  }
  /// Returns true if `response` has been explicitly set.
  var hasResponse: Bool {return self._response != nil}
  /// Clears the value of `response`. Subsequent reads from it will return its default value.
  mutating func clearResponse() {self._response = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _response: Bfi_Common_Response? = nil
}

struct Bfi_Common_HealthCheckResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uptime: Double = 0

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_UploadResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: String = String()

  var response: Bfi_Common_Response {
    get {return _response ?? Bfi_Common_Response()}
    set {_response = newValue}
  }
  /// Returns true if `response` has been explicitly set.
  var hasResponse: Bool {return self._response != nil}
  /// Clears the value of `response`. Subsequent reads from it will return its default value.
  mutating func clearResponse() {self._response = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _response: Bfi_Common_Response? = nil
}

struct Bfi_Common_commonRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataPayload: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_genericDetailsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bankCode: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Common_genericDetailsData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appIconInner: String {
    get {return _storage._appIconInner}
    set {_uniqueStorage()._appIconInner = newValue}
  }

  var appName: String {
    get {return _storage._appName}
    set {_uniqueStorage()._appName = newValue}
  }

  var appEmail: String {
    get {return _storage._appEmail}
    set {_uniqueStorage()._appEmail = newValue}
  }

  var appContact1: String {
    get {return _storage._appContact1}
    set {_uniqueStorage()._appContact1 = newValue}
  }

  var appContact2: String {
    get {return _storage._appContact2}
    set {_uniqueStorage()._appContact2 = newValue}
  }

  var appContact3: String {
    get {return _storage._appContact3}
    set {_uniqueStorage()._appContact3 = newValue}
  }

  var appContact4: String {
    get {return _storage._appContact4}
    set {_uniqueStorage()._appContact4 = newValue}
  }

  var appContact5: String {
    get {return _storage._appContact5}
    set {_uniqueStorage()._appContact5 = newValue}
  }

  var fbLink: String {
    get {return _storage._fbLink}
    set {_uniqueStorage()._fbLink = newValue}
  }

  var twitterLink: String {
    get {return _storage._twitterLink}
    set {_uniqueStorage()._twitterLink = newValue}
  }

  var instaLink: String {
    get {return _storage._instaLink}
    set {_uniqueStorage()._instaLink = newValue}
  }

  var linkedinLink: String {
    get {return _storage._linkedinLink}
    set {_uniqueStorage()._linkedinLink = newValue}
  }

  var colorCode1: String {
    get {return _storage._colorCode1}
    set {_uniqueStorage()._colorCode1 = newValue}
  }

  var colorCode2: String {
    get {return _storage._colorCode2}
    set {_uniqueStorage()._colorCode2 = newValue}
  }

  var bankCode: String {
    get {return _storage._bankCode}
    set {_uniqueStorage()._bankCode = newValue}
  }

  var bankSwiftCode: String {
    get {return _storage._bankSwiftCode}
    set {_uniqueStorage()._bankSwiftCode = newValue}
  }

  var bankName: String {
    get {return _storage._bankName}
    set {_uniqueStorage()._bankName = newValue}
  }

  var extra1: String {
    get {return _storage._extra1}
    set {_uniqueStorage()._extra1 = newValue}
  }

  var extra2: String {
    get {return _storage._extra2}
    set {_uniqueStorage()._extra2 = newValue}
  }

  var extra3: String {
    get {return _storage._extra3}
    set {_uniqueStorage()._extra3 = newValue}
  }

  var extra4: String {
    get {return _storage._extra4}
    set {_uniqueStorage()._extra4 = newValue}
  }

  var extra5: String {
    get {return _storage._extra5}
    set {_uniqueStorage()._extra5 = newValue}
  }

  var favicon: String {
    get {return _storage._favicon}
    set {_uniqueStorage()._favicon = newValue}
  }

  var website: String {
    get {return _storage._website}
    set {_uniqueStorage()._website = newValue}
  }

  var appIconOuter: String {
    get {return _storage._appIconOuter}
    set {_uniqueStorage()._appIconOuter = newValue}
  }

  var appInnerBackground: String {
    get {return _storage._appInnerBackground}
    set {_uniqueStorage()._appInnerBackground = newValue}
  }

  var appOuterBackground: String {
    get {return _storage._appOuterBackground}
    set {_uniqueStorage()._appOuterBackground = newValue}
  }

  var appNavToolbarIcon: String {
    get {return _storage._appNavToolbarIcon}
    set {_uniqueStorage()._appNavToolbarIcon = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bfi_Common_genericDetailsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: String = String()

  var message: String = String()

  var data: Bfi_Common_genericDetailsData {
    get {return _data ?? Bfi_Common_genericDetailsData()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: Bfi_Common_genericDetailsData? = nil
}

struct Bfi_Common_genericDetailsMinioData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appIconInner: String {
    get {return _storage._appIconInner}
    set {_uniqueStorage()._appIconInner = newValue}
  }

  var appName: String {
    get {return _storage._appName}
    set {_uniqueStorage()._appName = newValue}
  }

  var appEmail: String {
    get {return _storage._appEmail}
    set {_uniqueStorage()._appEmail = newValue}
  }

  var appContact1: String {
    get {return _storage._appContact1}
    set {_uniqueStorage()._appContact1 = newValue}
  }

  var appContact2: String {
    get {return _storage._appContact2}
    set {_uniqueStorage()._appContact2 = newValue}
  }

  var appContact3: String {
    get {return _storage._appContact3}
    set {_uniqueStorage()._appContact3 = newValue}
  }

  var appContact4: String {
    get {return _storage._appContact4}
    set {_uniqueStorage()._appContact4 = newValue}
  }

  var appContact5: String {
    get {return _storage._appContact5}
    set {_uniqueStorage()._appContact5 = newValue}
  }

  var fbLink: String {
    get {return _storage._fbLink}
    set {_uniqueStorage()._fbLink = newValue}
  }

  var twitterLink: String {
    get {return _storage._twitterLink}
    set {_uniqueStorage()._twitterLink = newValue}
  }

  var instaLink: String {
    get {return _storage._instaLink}
    set {_uniqueStorage()._instaLink = newValue}
  }

  var linkedinLink: String {
    get {return _storage._linkedinLink}
    set {_uniqueStorage()._linkedinLink = newValue}
  }

  var colorCode1: String {
    get {return _storage._colorCode1}
    set {_uniqueStorage()._colorCode1 = newValue}
  }

  var colorCode2: String {
    get {return _storage._colorCode2}
    set {_uniqueStorage()._colorCode2 = newValue}
  }

  var bankCode: String {
    get {return _storage._bankCode}
    set {_uniqueStorage()._bankCode = newValue}
  }

  var bankSwiftCode: String {
    get {return _storage._bankSwiftCode}
    set {_uniqueStorage()._bankSwiftCode = newValue}
  }

  var bankName: String {
    get {return _storage._bankName}
    set {_uniqueStorage()._bankName = newValue}
  }

  var extra1: String {
    get {return _storage._extra1}
    set {_uniqueStorage()._extra1 = newValue}
  }

  var extra2: String {
    get {return _storage._extra2}
    set {_uniqueStorage()._extra2 = newValue}
  }

  var extra3: String {
    get {return _storage._extra3}
    set {_uniqueStorage()._extra3 = newValue}
  }

  var extra4: String {
    get {return _storage._extra4}
    set {_uniqueStorage()._extra4 = newValue}
  }

  var extra5: String {
    get {return _storage._extra5}
    set {_uniqueStorage()._extra5 = newValue}
  }

  var favicon: String {
    get {return _storage._favicon}
    set {_uniqueStorage()._favicon = newValue}
  }

  var website: String {
    get {return _storage._website}
    set {_uniqueStorage()._website = newValue}
  }

  var appIconOuter: String {
    get {return _storage._appIconOuter}
    set {_uniqueStorage()._appIconOuter = newValue}
  }

  var appInnerBackground: String {
    get {return _storage._appInnerBackground}
    set {_uniqueStorage()._appInnerBackground = newValue}
  }

  var appOuterBackground: String {
    get {return _storage._appOuterBackground}
    set {_uniqueStorage()._appOuterBackground = newValue}
  }

  var appNavToolbarIcon: String {
    get {return _storage._appNavToolbarIcon}
    set {_uniqueStorage()._appNavToolbarIcon = newValue}
  }

  var logo: String {
    get {return _storage._logo}
    set {_uniqueStorage()._logo = newValue}
  }

  var watermark: String {
    get {return _storage._watermark}
    set {_uniqueStorage()._watermark = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bfi_Common_genericDetailsMinioResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: String = String()

  var message: String = String()

  var genericData: Bfi_Common_genericDetailsMinioData {
    get {return _genericData ?? Bfi_Common_genericDetailsMinioData()}
    set {_genericData = newValue}
  }
  /// Returns true if `genericData` has been explicitly set.
  var hasGenericData: Bool {return self._genericData != nil}
  /// Clears the value of `genericData`. Subsequent reads from it will return its default value.
  mutating func clearGenericData() {self._genericData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _genericData: Bfi_Common_genericDetailsMinioData? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bfi_Common_ListRequest: @unchecked Sendable {}
extension Bfi_Common_GetRequest: @unchecked Sendable {}
extension Bfi_Common_Empty: @unchecked Sendable {}
extension Bfi_Common_Request: @unchecked Sendable {}
extension Bfi_Common_DetectChannel: @unchecked Sendable {}
extension Bfi_Common_Response: @unchecked Sendable {}
extension Bfi_Common_MobileCommonResponse: @unchecked Sendable {}
extension Bfi_Common_Pagination: @unchecked Sendable {}
extension Bfi_Common_Meta: @unchecked Sendable {}
extension Bfi_Common_ApproveRejectRequest: @unchecked Sendable {}
extension Bfi_Common_SingleApproveRejectRequest: @unchecked Sendable {}
extension Bfi_Common_ApproveRejectBatchRequest: @unchecked Sendable {}
extension Bfi_Common_DropdownRequest: @unchecked Sendable {}
extension Bfi_Common_DetailRequest: @unchecked Sendable {}
extension Bfi_Common_DropdownDetail: @unchecked Sendable {}
extension Bfi_Common_DropdownResponse: @unchecked Sendable {}
extension Bfi_Common_HealthCheckResponse: @unchecked Sendable {}
extension Bfi_Common_UploadResponse: @unchecked Sendable {}
extension Bfi_Common_commonRequest: @unchecked Sendable {}
extension Bfi_Common_genericDetailsRequest: @unchecked Sendable {}
extension Bfi_Common_genericDetailsData: @unchecked Sendable {}
extension Bfi_Common_genericDetailsResponse: @unchecked Sendable {}
extension Bfi_Common_genericDetailsMinioData: @unchecked Sendable {}
extension Bfi_Common_genericDetailsMinioResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bfi.common"

extension Bfi_Common_ListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "currentPage"),
    2: .same(proto: "perPage"),
    3: .same(proto: "filter"),
    4: .same(proto: "order"),
    5: .same(proto: "exportType"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.currentPage) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.perPage) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.filter) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.order) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.exportType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.currentPage != 0 {
      try visitor.visitSingularInt32Field(value: self.currentPage, fieldNumber: 1)
    }
    if self.perPage != 0 {
      try visitor.visitSingularInt32Field(value: self.perPage, fieldNumber: 2)
    }
    if !self.filter.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.filter, fieldNumber: 3)
    }
    if !self.order.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.order, fieldNumber: 4)
    }
    if !self.exportType.isEmpty {
      try visitor.visitSingularStringField(value: self.exportType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_ListRequest, rhs: Bfi_Common_ListRequest) -> Bool {
    if lhs.currentPage != rhs.currentPage {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.order != rhs.order {return false}
    if lhs.exportType != rhs.exportType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_GetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_GetRequest, rhs: Bfi_Common_GetRequest) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Empty"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_Empty, rhs: Bfi_Common_Empty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uniqueIdentifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uniqueIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uniqueIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.uniqueIdentifier, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_Request, rhs: Bfi_Common_Request) -> Bool {
    if lhs.uniqueIdentifier != rhs.uniqueIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_DetectChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DetectChannel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "detectChannel"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._detectChannel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._detectChannel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_DetectChannel, rhs: Bfi_Common_DetectChannel) -> Bool {
    if lhs._detectChannel != rhs._detectChannel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_Response, rhs: Bfi_Common_Response) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_MobileCommonResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MobileCommonResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "message"),
    3: .same(proto: "registerDevice"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.registerDevice) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.registerDevice != false {
      try visitor.visitSingularBoolField(value: self.registerDevice, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_MobileCommonResponse, rhs: Bfi_Common_MobileCommonResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.message != rhs.message {return false}
    if lhs.registerDevice != rhs.registerDevice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_Pagination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Pagination"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "currentPage"),
    2: .same(proto: "totalItem"),
    3: .same(proto: "totalPage"),
    4: .same(proto: "perPage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.currentPage) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.totalItem) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.totalPage) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.perPage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.currentPage != 0 {
      try visitor.visitSingularInt32Field(value: self.currentPage, fieldNumber: 1)
    }
    if self.totalItem != 0 {
      try visitor.visitSingularInt32Field(value: self.totalItem, fieldNumber: 2)
    }
    if self.totalPage != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPage, fieldNumber: 3)
    }
    if self.perPage != 0 {
      try visitor.visitSingularInt32Field(value: self.perPage, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_Pagination, rhs: Bfi_Common_Pagination) -> Bool {
    if lhs.currentPage != rhs.currentPage {return false}
    if lhs.totalItem != rhs.totalItem {return false}
    if lhs.totalPage != rhs.totalPage {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_Meta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Meta"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pagination"),
    2: .same(proto: "response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._response) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._response {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_Meta, rhs: Bfi_Common_Meta) -> Bool {
    if lhs._pagination != rhs._pagination {return false}
    if lhs._response != rhs._response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_ApproveRejectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApproveRejectRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "action"),
    3: .same(proto: "remarks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.uuid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.action) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.remarks) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitRepeatedStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 2)
    }
    if !self.remarks.isEmpty {
      try visitor.visitSingularStringField(value: self.remarks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_ApproveRejectRequest, rhs: Bfi_Common_ApproveRejectRequest) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.action != rhs.action {return false}
    if lhs.remarks != rhs.remarks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_SingleApproveRejectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SingleApproveRejectRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "action"),
    3: .same(proto: "remarks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.action) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.remarks) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 2)
    }
    if !self.remarks.isEmpty {
      try visitor.visitSingularStringField(value: self.remarks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_SingleApproveRejectRequest, rhs: Bfi_Common_SingleApproveRejectRequest) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.action != rhs.action {return false}
    if lhs.remarks != rhs.remarks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_ApproveRejectBatchRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApproveRejectBatchRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "batchId"),
    2: .same(proto: "action"),
    3: .same(proto: "remarks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.batchID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.action) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.remarks) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.batchID.isEmpty {
      try visitor.visitSingularStringField(value: self.batchID, fieldNumber: 1)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 2)
    }
    if !self.remarks.isEmpty {
      try visitor.visitSingularStringField(value: self.remarks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_ApproveRejectBatchRequest, rhs: Bfi_Common_ApproveRejectBatchRequest) -> Bool {
    if lhs.batchID != rhs.batchID {return false}
    if lhs.action != rhs.action {return false}
    if lhs.remarks != rhs.remarks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_DropdownRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DropdownRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "filter"),
    4: .same(proto: "order"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.filter) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.order) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.filter.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.filter, fieldNumber: 3)
    }
    if !self.order.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.order, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_DropdownRequest, rhs: Bfi_Common_DropdownRequest) -> Bool {
    if lhs.filter != rhs.filter {return false}
    if lhs.order != rhs.order {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_DetailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DetailRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "filter"),
    4: .same(proto: "order"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.filter) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.order) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.filter.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.filter, fieldNumber: 3)
    }
    if !self.order.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.order, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_DetailRequest, rhs: Bfi_Common_DetailRequest) -> Bool {
    if lhs.filter != rhs.filter {return false}
    if lhs.order != rhs.order {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_DropdownDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DropdownDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_DropdownDetail, rhs: Bfi_Common_DropdownDetail) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_DropdownResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DropdownResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._response) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try { if let v = self._response {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_DropdownResponse, rhs: Bfi_Common_DropdownResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs._response != rhs._response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_HealthCheckResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HealthCheckResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uptime"),
    2: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.uptime) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.uptime != 0 {
      try visitor.visitSingularDoubleField(value: self.uptime, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_HealthCheckResponse, rhs: Bfi_Common_HealthCheckResponse) -> Bool {
    if lhs.uptime != rhs.uptime {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_UploadResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UploadResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.data) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._response) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 1)
    }
    try { if let v = self._response {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_UploadResponse, rhs: Bfi_Common_UploadResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs._response != rhs._response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_commonRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".commonRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataPayload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dataPayload) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataPayload.isEmpty {
      try visitor.visitSingularStringField(value: self.dataPayload, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_commonRequest, rhs: Bfi_Common_commonRequest) -> Bool {
    if lhs.dataPayload != rhs.dataPayload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_genericDetailsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".genericDetailsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bankCode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bankCode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bankCode.isEmpty {
      try visitor.visitSingularStringField(value: self.bankCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_genericDetailsRequest, rhs: Bfi_Common_genericDetailsRequest) -> Bool {
    if lhs.bankCode != rhs.bankCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_genericDetailsData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".genericDetailsData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appIconInner"),
    2: .same(proto: "appName"),
    3: .same(proto: "appEmail"),
    4: .same(proto: "appContact1"),
    5: .same(proto: "appContact2"),
    6: .same(proto: "appContact3"),
    7: .same(proto: "appContact4"),
    8: .same(proto: "appContact5"),
    9: .same(proto: "fbLink"),
    10: .same(proto: "twitterLink"),
    11: .same(proto: "instaLink"),
    12: .same(proto: "linkedinLink"),
    13: .same(proto: "colorCode1"),
    14: .same(proto: "colorCode2"),
    15: .same(proto: "bankCode"),
    16: .same(proto: "bankSwiftCode"),
    17: .same(proto: "bankName"),
    18: .same(proto: "extra1"),
    19: .same(proto: "extra2"),
    20: .same(proto: "extra3"),
    21: .same(proto: "extra4"),
    22: .same(proto: "extra5"),
    23: .same(proto: "favicon"),
    24: .same(proto: "website"),
    25: .same(proto: "appIconOuter"),
    26: .same(proto: "appInnerBackground"),
    27: .same(proto: "appOuterBackground"),
    28: .same(proto: "appNavToolbarIcon"),
  ]

  fileprivate class _StorageClass {
    var _appIconInner: String = String()
    var _appName: String = String()
    var _appEmail: String = String()
    var _appContact1: String = String()
    var _appContact2: String = String()
    var _appContact3: String = String()
    var _appContact4: String = String()
    var _appContact5: String = String()
    var _fbLink: String = String()
    var _twitterLink: String = String()
    var _instaLink: String = String()
    var _linkedinLink: String = String()
    var _colorCode1: String = String()
    var _colorCode2: String = String()
    var _bankCode: String = String()
    var _bankSwiftCode: String = String()
    var _bankName: String = String()
    var _extra1: String = String()
    var _extra2: String = String()
    var _extra3: String = String()
    var _extra4: String = String()
    var _extra5: String = String()
    var _favicon: String = String()
    var _website: String = String()
    var _appIconOuter: String = String()
    var _appInnerBackground: String = String()
    var _appOuterBackground: String = String()
    var _appNavToolbarIcon: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _appIconInner = source._appIconInner
      _appName = source._appName
      _appEmail = source._appEmail
      _appContact1 = source._appContact1
      _appContact2 = source._appContact2
      _appContact3 = source._appContact3
      _appContact4 = source._appContact4
      _appContact5 = source._appContact5
      _fbLink = source._fbLink
      _twitterLink = source._twitterLink
      _instaLink = source._instaLink
      _linkedinLink = source._linkedinLink
      _colorCode1 = source._colorCode1
      _colorCode2 = source._colorCode2
      _bankCode = source._bankCode
      _bankSwiftCode = source._bankSwiftCode
      _bankName = source._bankName
      _extra1 = source._extra1
      _extra2 = source._extra2
      _extra3 = source._extra3
      _extra4 = source._extra4
      _extra5 = source._extra5
      _favicon = source._favicon
      _website = source._website
      _appIconOuter = source._appIconOuter
      _appInnerBackground = source._appInnerBackground
      _appOuterBackground = source._appOuterBackground
      _appNavToolbarIcon = source._appNavToolbarIcon
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._appIconInner) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._appName) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._appEmail) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._appContact1) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._appContact2) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._appContact3) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._appContact4) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._appContact5) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._fbLink) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._twitterLink) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._instaLink) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._linkedinLink) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._colorCode1) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._colorCode2) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._bankCode) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._bankSwiftCode) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._bankName) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._extra1) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._extra2) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._extra3) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._extra4) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._extra5) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._favicon) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._website) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._appIconOuter) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._appInnerBackground) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._appOuterBackground) }()
        case 28: try { try decoder.decodeSingularStringField(value: &_storage._appNavToolbarIcon) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._appIconInner.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appIconInner, fieldNumber: 1)
      }
      if !_storage._appName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appName, fieldNumber: 2)
      }
      if !_storage._appEmail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appEmail, fieldNumber: 3)
      }
      if !_storage._appContact1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appContact1, fieldNumber: 4)
      }
      if !_storage._appContact2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appContact2, fieldNumber: 5)
      }
      if !_storage._appContact3.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appContact3, fieldNumber: 6)
      }
      if !_storage._appContact4.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appContact4, fieldNumber: 7)
      }
      if !_storage._appContact5.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appContact5, fieldNumber: 8)
      }
      if !_storage._fbLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fbLink, fieldNumber: 9)
      }
      if !_storage._twitterLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._twitterLink, fieldNumber: 10)
      }
      if !_storage._instaLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._instaLink, fieldNumber: 11)
      }
      if !_storage._linkedinLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._linkedinLink, fieldNumber: 12)
      }
      if !_storage._colorCode1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._colorCode1, fieldNumber: 13)
      }
      if !_storage._colorCode2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._colorCode2, fieldNumber: 14)
      }
      if !_storage._bankCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bankCode, fieldNumber: 15)
      }
      if !_storage._bankSwiftCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bankSwiftCode, fieldNumber: 16)
      }
      if !_storage._bankName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bankName, fieldNumber: 17)
      }
      if !_storage._extra1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extra1, fieldNumber: 18)
      }
      if !_storage._extra2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extra2, fieldNumber: 19)
      }
      if !_storage._extra3.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extra3, fieldNumber: 20)
      }
      if !_storage._extra4.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extra4, fieldNumber: 21)
      }
      if !_storage._extra5.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extra5, fieldNumber: 22)
      }
      if !_storage._favicon.isEmpty {
        try visitor.visitSingularStringField(value: _storage._favicon, fieldNumber: 23)
      }
      if !_storage._website.isEmpty {
        try visitor.visitSingularStringField(value: _storage._website, fieldNumber: 24)
      }
      if !_storage._appIconOuter.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appIconOuter, fieldNumber: 25)
      }
      if !_storage._appInnerBackground.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appInnerBackground, fieldNumber: 26)
      }
      if !_storage._appOuterBackground.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appOuterBackground, fieldNumber: 27)
      }
      if !_storage._appNavToolbarIcon.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appNavToolbarIcon, fieldNumber: 28)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_genericDetailsData, rhs: Bfi_Common_genericDetailsData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._appIconInner != rhs_storage._appIconInner {return false}
        if _storage._appName != rhs_storage._appName {return false}
        if _storage._appEmail != rhs_storage._appEmail {return false}
        if _storage._appContact1 != rhs_storage._appContact1 {return false}
        if _storage._appContact2 != rhs_storage._appContact2 {return false}
        if _storage._appContact3 != rhs_storage._appContact3 {return false}
        if _storage._appContact4 != rhs_storage._appContact4 {return false}
        if _storage._appContact5 != rhs_storage._appContact5 {return false}
        if _storage._fbLink != rhs_storage._fbLink {return false}
        if _storage._twitterLink != rhs_storage._twitterLink {return false}
        if _storage._instaLink != rhs_storage._instaLink {return false}
        if _storage._linkedinLink != rhs_storage._linkedinLink {return false}
        if _storage._colorCode1 != rhs_storage._colorCode1 {return false}
        if _storage._colorCode2 != rhs_storage._colorCode2 {return false}
        if _storage._bankCode != rhs_storage._bankCode {return false}
        if _storage._bankSwiftCode != rhs_storage._bankSwiftCode {return false}
        if _storage._bankName != rhs_storage._bankName {return false}
        if _storage._extra1 != rhs_storage._extra1 {return false}
        if _storage._extra2 != rhs_storage._extra2 {return false}
        if _storage._extra3 != rhs_storage._extra3 {return false}
        if _storage._extra4 != rhs_storage._extra4 {return false}
        if _storage._extra5 != rhs_storage._extra5 {return false}
        if _storage._favicon != rhs_storage._favicon {return false}
        if _storage._website != rhs_storage._website {return false}
        if _storage._appIconOuter != rhs_storage._appIconOuter {return false}
        if _storage._appInnerBackground != rhs_storage._appInnerBackground {return false}
        if _storage._appOuterBackground != rhs_storage._appOuterBackground {return false}
        if _storage._appNavToolbarIcon != rhs_storage._appNavToolbarIcon {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_genericDetailsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".genericDetailsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "message"),
    3: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_genericDetailsResponse, rhs: Bfi_Common_genericDetailsResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_genericDetailsMinioData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".genericDetailsMinioData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appIconInner"),
    2: .same(proto: "appName"),
    3: .same(proto: "appEmail"),
    4: .same(proto: "appContact1"),
    5: .same(proto: "appContact2"),
    6: .same(proto: "appContact3"),
    7: .same(proto: "appContact4"),
    8: .same(proto: "appContact5"),
    9: .same(proto: "fbLink"),
    10: .same(proto: "twitterLink"),
    11: .same(proto: "instaLink"),
    12: .same(proto: "linkedinLink"),
    13: .same(proto: "colorCode1"),
    14: .same(proto: "colorCode2"),
    15: .same(proto: "bankCode"),
    16: .same(proto: "bankSwiftCode"),
    17: .same(proto: "bankName"),
    18: .same(proto: "extra1"),
    19: .same(proto: "extra2"),
    20: .same(proto: "extra3"),
    21: .same(proto: "extra4"),
    22: .same(proto: "extra5"),
    23: .same(proto: "favicon"),
    24: .same(proto: "website"),
    25: .same(proto: "appIconOuter"),
    26: .same(proto: "appInnerBackground"),
    27: .same(proto: "appOuterBackground"),
    28: .same(proto: "appNavToolbarIcon"),
    29: .same(proto: "logo"),
    30: .same(proto: "watermark"),
  ]

  fileprivate class _StorageClass {
    var _appIconInner: String = String()
    var _appName: String = String()
    var _appEmail: String = String()
    var _appContact1: String = String()
    var _appContact2: String = String()
    var _appContact3: String = String()
    var _appContact4: String = String()
    var _appContact5: String = String()
    var _fbLink: String = String()
    var _twitterLink: String = String()
    var _instaLink: String = String()
    var _linkedinLink: String = String()
    var _colorCode1: String = String()
    var _colorCode2: String = String()
    var _bankCode: String = String()
    var _bankSwiftCode: String = String()
    var _bankName: String = String()
    var _extra1: String = String()
    var _extra2: String = String()
    var _extra3: String = String()
    var _extra4: String = String()
    var _extra5: String = String()
    var _favicon: String = String()
    var _website: String = String()
    var _appIconOuter: String = String()
    var _appInnerBackground: String = String()
    var _appOuterBackground: String = String()
    var _appNavToolbarIcon: String = String()
    var _logo: String = String()
    var _watermark: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _appIconInner = source._appIconInner
      _appName = source._appName
      _appEmail = source._appEmail
      _appContact1 = source._appContact1
      _appContact2 = source._appContact2
      _appContact3 = source._appContact3
      _appContact4 = source._appContact4
      _appContact5 = source._appContact5
      _fbLink = source._fbLink
      _twitterLink = source._twitterLink
      _instaLink = source._instaLink
      _linkedinLink = source._linkedinLink
      _colorCode1 = source._colorCode1
      _colorCode2 = source._colorCode2
      _bankCode = source._bankCode
      _bankSwiftCode = source._bankSwiftCode
      _bankName = source._bankName
      _extra1 = source._extra1
      _extra2 = source._extra2
      _extra3 = source._extra3
      _extra4 = source._extra4
      _extra5 = source._extra5
      _favicon = source._favicon
      _website = source._website
      _appIconOuter = source._appIconOuter
      _appInnerBackground = source._appInnerBackground
      _appOuterBackground = source._appOuterBackground
      _appNavToolbarIcon = source._appNavToolbarIcon
      _logo = source._logo
      _watermark = source._watermark
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._appIconInner) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._appName) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._appEmail) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._appContact1) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._appContact2) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._appContact3) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._appContact4) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._appContact5) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._fbLink) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._twitterLink) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._instaLink) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._linkedinLink) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._colorCode1) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._colorCode2) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._bankCode) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._bankSwiftCode) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._bankName) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._extra1) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._extra2) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._extra3) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._extra4) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._extra5) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._favicon) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._website) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._appIconOuter) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._appInnerBackground) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._appOuterBackground) }()
        case 28: try { try decoder.decodeSingularStringField(value: &_storage._appNavToolbarIcon) }()
        case 29: try { try decoder.decodeSingularStringField(value: &_storage._logo) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._watermark) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._appIconInner.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appIconInner, fieldNumber: 1)
      }
      if !_storage._appName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appName, fieldNumber: 2)
      }
      if !_storage._appEmail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appEmail, fieldNumber: 3)
      }
      if !_storage._appContact1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appContact1, fieldNumber: 4)
      }
      if !_storage._appContact2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appContact2, fieldNumber: 5)
      }
      if !_storage._appContact3.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appContact3, fieldNumber: 6)
      }
      if !_storage._appContact4.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appContact4, fieldNumber: 7)
      }
      if !_storage._appContact5.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appContact5, fieldNumber: 8)
      }
      if !_storage._fbLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fbLink, fieldNumber: 9)
      }
      if !_storage._twitterLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._twitterLink, fieldNumber: 10)
      }
      if !_storage._instaLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._instaLink, fieldNumber: 11)
      }
      if !_storage._linkedinLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._linkedinLink, fieldNumber: 12)
      }
      if !_storage._colorCode1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._colorCode1, fieldNumber: 13)
      }
      if !_storage._colorCode2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._colorCode2, fieldNumber: 14)
      }
      if !_storage._bankCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bankCode, fieldNumber: 15)
      }
      if !_storage._bankSwiftCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bankSwiftCode, fieldNumber: 16)
      }
      if !_storage._bankName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bankName, fieldNumber: 17)
      }
      if !_storage._extra1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extra1, fieldNumber: 18)
      }
      if !_storage._extra2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extra2, fieldNumber: 19)
      }
      if !_storage._extra3.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extra3, fieldNumber: 20)
      }
      if !_storage._extra4.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extra4, fieldNumber: 21)
      }
      if !_storage._extra5.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extra5, fieldNumber: 22)
      }
      if !_storage._favicon.isEmpty {
        try visitor.visitSingularStringField(value: _storage._favicon, fieldNumber: 23)
      }
      if !_storage._website.isEmpty {
        try visitor.visitSingularStringField(value: _storage._website, fieldNumber: 24)
      }
      if !_storage._appIconOuter.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appIconOuter, fieldNumber: 25)
      }
      if !_storage._appInnerBackground.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appInnerBackground, fieldNumber: 26)
      }
      if !_storage._appOuterBackground.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appOuterBackground, fieldNumber: 27)
      }
      if !_storage._appNavToolbarIcon.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appNavToolbarIcon, fieldNumber: 28)
      }
      if !_storage._logo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logo, fieldNumber: 29)
      }
      if !_storage._watermark.isEmpty {
        try visitor.visitSingularStringField(value: _storage._watermark, fieldNumber: 30)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_genericDetailsMinioData, rhs: Bfi_Common_genericDetailsMinioData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._appIconInner != rhs_storage._appIconInner {return false}
        if _storage._appName != rhs_storage._appName {return false}
        if _storage._appEmail != rhs_storage._appEmail {return false}
        if _storage._appContact1 != rhs_storage._appContact1 {return false}
        if _storage._appContact2 != rhs_storage._appContact2 {return false}
        if _storage._appContact3 != rhs_storage._appContact3 {return false}
        if _storage._appContact4 != rhs_storage._appContact4 {return false}
        if _storage._appContact5 != rhs_storage._appContact5 {return false}
        if _storage._fbLink != rhs_storage._fbLink {return false}
        if _storage._twitterLink != rhs_storage._twitterLink {return false}
        if _storage._instaLink != rhs_storage._instaLink {return false}
        if _storage._linkedinLink != rhs_storage._linkedinLink {return false}
        if _storage._colorCode1 != rhs_storage._colorCode1 {return false}
        if _storage._colorCode2 != rhs_storage._colorCode2 {return false}
        if _storage._bankCode != rhs_storage._bankCode {return false}
        if _storage._bankSwiftCode != rhs_storage._bankSwiftCode {return false}
        if _storage._bankName != rhs_storage._bankName {return false}
        if _storage._extra1 != rhs_storage._extra1 {return false}
        if _storage._extra2 != rhs_storage._extra2 {return false}
        if _storage._extra3 != rhs_storage._extra3 {return false}
        if _storage._extra4 != rhs_storage._extra4 {return false}
        if _storage._extra5 != rhs_storage._extra5 {return false}
        if _storage._favicon != rhs_storage._favicon {return false}
        if _storage._website != rhs_storage._website {return false}
        if _storage._appIconOuter != rhs_storage._appIconOuter {return false}
        if _storage._appInnerBackground != rhs_storage._appInnerBackground {return false}
        if _storage._appOuterBackground != rhs_storage._appOuterBackground {return false}
        if _storage._appNavToolbarIcon != rhs_storage._appNavToolbarIcon {return false}
        if _storage._logo != rhs_storage._logo {return false}
        if _storage._watermark != rhs_storage._watermark {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Common_genericDetailsMinioResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".genericDetailsMinioResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "message"),
    3: .same(proto: "genericData"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._genericData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._genericData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Common_genericDetailsMinioResponse, rhs: Bfi_Common_genericDetailsMinioResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.message != rhs.message {return false}
    if lhs._genericData != rhs._genericData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
