// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: banner.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bfi_Banner_BannerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  var bannerTitle: String {
    get {return _storage._bannerTitle}
    set {_uniqueStorage()._bannerTitle = newValue}
  }

  var interfaceType: String {
    get {return _storage._interfaceType}
    set {_uniqueStorage()._interfaceType = newValue}
  }

  var bannerType: String {
    get {return _storage._bannerType}
    set {_uniqueStorage()._bannerType = newValue}
  }

  var bannerDescription: String {
    get {return _storage._bannerDescription}
    set {_uniqueStorage()._bannerDescription = newValue}
  }

  var urlPath: String {
    get {return _storage._urlPath}
    set {_uniqueStorage()._urlPath = newValue}
  }

  var ordering: Int32 {
    get {return _storage._ordering}
    set {_uniqueStorage()._ordering = newValue}
  }

  var isActive: Bool {
    get {return _storage._isActive}
    set {_uniqueStorage()._isActive = newValue}
  }

  var district: String {
    get {return _storage._district}
    set {_uniqueStorage()._district = newValue}
  }

  var province: String {
    get {return _storage._province}
    set {_uniqueStorage()._province = newValue}
  }

  var gender: String {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  var minAge: Int32 {
    get {return _storage._minAge}
    set {_uniqueStorage()._minAge = newValue}
  }

  var maxAge: Int32 {
    get {return _storage._maxAge}
    set {_uniqueStorage()._maxAge = newValue}
  }

  var schemeType: String {
    get {return _storage._schemeType}
    set {_uniqueStorage()._schemeType = newValue}
  }

  var redirectLink: String {
    get {return _storage._redirectLink}
    set {_uniqueStorage()._redirectLink = newValue}
  }

  var effectiveDate: String {
    get {return _storage._effectiveDate}
    set {_uniqueStorage()._effectiveDate = newValue}
  }

  var expiryDate: String {
    get {return _storage._expiryDate}
    set {_uniqueStorage()._expiryDate = newValue}
  }

  var redirectType: Int32 {
    get {return _storage._redirectType}
    set {_uniqueStorage()._redirectType = newValue}
  }

  var bankBranchID: String {
    get {return _storage._bankBranchID}
    set {_uniqueStorage()._bankBranchID = newValue}
  }

  var featureKeyword: String {
    get {return _storage._featureKeyword}
    set {_uniqueStorage()._featureKeyword = newValue}
  }

  var profileID: [String] {
    get {return _storage._profileID}
    set {_uniqueStorage()._profileID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bfi_Banner_GetBannerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  var bannerTitle: String {
    get {return _storage._bannerTitle}
    set {_uniqueStorage()._bannerTitle = newValue}
  }

  var interfaceType: String {
    get {return _storage._interfaceType}
    set {_uniqueStorage()._interfaceType = newValue}
  }

  var bannerType: String {
    get {return _storage._bannerType}
    set {_uniqueStorage()._bannerType = newValue}
  }

  var bannerDescription: String {
    get {return _storage._bannerDescription}
    set {_uniqueStorage()._bannerDescription = newValue}
  }

  var urlPath: String {
    get {return _storage._urlPath}
    set {_uniqueStorage()._urlPath = newValue}
  }

  var ordering: Int32 {
    get {return _storage._ordering}
    set {_uniqueStorage()._ordering = newValue}
  }

  var isActive: Bool {
    get {return _storage._isActive}
    set {_uniqueStorage()._isActive = newValue}
  }

  var district: String {
    get {return _storage._district}
    set {_uniqueStorage()._district = newValue}
  }

  var province: String {
    get {return _storage._province}
    set {_uniqueStorage()._province = newValue}
  }

  var gender: String {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  var minAge: Int32 {
    get {return _storage._minAge}
    set {_uniqueStorage()._minAge = newValue}
  }

  var maxAge: Int32 {
    get {return _storage._maxAge}
    set {_uniqueStorage()._maxAge = newValue}
  }

  var schemeType: String {
    get {return _storage._schemeType}
    set {_uniqueStorage()._schemeType = newValue}
  }

  var redirectLink: String {
    get {return _storage._redirectLink}
    set {_uniqueStorage()._redirectLink = newValue}
  }

  var effectiveDate: String {
    get {return _storage._effectiveDate}
    set {_uniqueStorage()._effectiveDate = newValue}
  }

  var expiryDate: String {
    get {return _storage._expiryDate}
    set {_uniqueStorage()._expiryDate = newValue}
  }

  var redirectType: Int32 {
    get {return _storage._redirectType}
    set {_uniqueStorage()._redirectType = newValue}
  }

  var bankBranchID: String {
    get {return _storage._bankBranchID}
    set {_uniqueStorage()._bankBranchID = newValue}
  }

  var featureKeyword: String {
    get {return _storage._featureKeyword}
    set {_uniqueStorage()._featureKeyword = newValue}
  }

  var profileID: String {
    get {return _storage._profileID}
    set {_uniqueStorage()._profileID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bfi_Banner_ExpiredBannerList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataList: [Bfi_Banner_BannerDetail] = []

  var meta: Bfi_Common_Meta {
    get {return _meta ?? Bfi_Common_Meta()}
    set {_meta = newValue}
  }
  /// Returns true if `meta` has been explicitly set.
  var hasMeta: Bool {return self._meta != nil}
  /// Clears the value of `meta`. Subsequent reads from it will return its default value.
  mutating func clearMeta() {self._meta = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _meta: Bfi_Common_Meta? = nil
}

struct Bfi_Banner_getBannerListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataList: [Bfi_Banner_GetBannerRequest] = []

  var meta: Bfi_Common_Meta {
    get {return _meta ?? Bfi_Common_Meta()}
    set {_meta = newValue}
  }
  /// Returns true if `meta` has been explicitly set.
  var hasMeta: Bool {return self._meta != nil}
  /// Clears the value of `meta`. Subsequent reads from it will return its default value.
  mutating func clearMeta() {self._meta = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _meta: Bfi_Common_Meta? = nil
}

struct Bfi_Banner_getBannerByIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Banner_bannerByIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: Bfi_Common_Response {
    get {return _response ?? Bfi_Common_Response()}
    set {_response = newValue}
  }
  /// Returns true if `response` has been explicitly set.
  var hasResponse: Bool {return self._response != nil}
  /// Clears the value of `response`. Subsequent reads from it will return its default value.
  mutating func clearResponse() {self._response = nil}

  var data: Bfi_Banner_GetBannerRequest {
    get {return _data ?? Bfi_Banner_GetBannerRequest()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _response: Bfi_Common_Response? = nil
  fileprivate var _data: Bfi_Banner_GetBannerRequest? = nil
}

struct Bfi_Banner_modifyBannerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  var bannerTitle: String {
    get {return _storage._bannerTitle}
    set {_uniqueStorage()._bannerTitle = newValue}
  }

  var bannerDescription: String {
    get {return _storage._bannerDescription}
    set {_uniqueStorage()._bannerDescription = newValue}
  }

  var urlPath: String {
    get {return _storage._urlPath}
    set {_uniqueStorage()._urlPath = newValue}
  }

  var ordering: Int32 {
    get {return _storage._ordering}
    set {_uniqueStorage()._ordering = newValue}
  }

  var isActive: Bool {
    get {return _storage._isActive}
    set {_uniqueStorage()._isActive = newValue}
  }

  var redirectLink: String {
    get {return _storage._redirectLink}
    set {_uniqueStorage()._redirectLink = newValue}
  }

  var isDeleted: Bool {
    get {return _storage._isDeleted}
    set {_uniqueStorage()._isDeleted = newValue}
  }

  var district: Int32 {
    get {return _storage._district}
    set {_uniqueStorage()._district = newValue}
  }

  var province: Int32 {
    get {return _storage._province}
    set {_uniqueStorage()._province = newValue}
  }

  var gender: String {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  var minAge: Int32 {
    get {return _storage._minAge}
    set {_uniqueStorage()._minAge = newValue}
  }

  var maxAge: Int32 {
    get {return _storage._maxAge}
    set {_uniqueStorage()._maxAge = newValue}
  }

  var schemeType: String {
    get {return _storage._schemeType}
    set {_uniqueStorage()._schemeType = newValue}
  }

  var expiryDate: String {
    get {return _storage._expiryDate}
    set {_uniqueStorage()._expiryDate = newValue}
  }

  var updatedDate: Int64 {
    get {return _storage._updatedDate}
    set {_uniqueStorage()._updatedDate = newValue}
  }

  var updatedBy: String {
    get {return _storage._updatedBy}
    set {_uniqueStorage()._updatedBy = newValue}
  }

  var redirectType: Int32 {
    get {return _storage._redirectType}
    set {_uniqueStorage()._redirectType = newValue}
  }

  var bankBranchID: String {
    get {return _storage._bankBranchID}
    set {_uniqueStorage()._bankBranchID = newValue}
  }

  var effectiveDate: String {
    get {return _storage._effectiveDate}
    set {_uniqueStorage()._effectiveDate = newValue}
  }

  var featureKeyword: String {
    get {return _storage._featureKeyword}
    set {_uniqueStorage()._featureKeyword = newValue}
  }

  var profileID: [String] {
    get {return _storage._profileID}
    set {_uniqueStorage()._profileID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bfi_Banner_deleteBannerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Banner_list {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  var bannerTitle: String {
    get {return _storage._bannerTitle}
    set {_uniqueStorage()._bannerTitle = newValue}
  }

  var interfaceType: String {
    get {return _storage._interfaceType}
    set {_uniqueStorage()._interfaceType = newValue}
  }

  var bannerType: String {
    get {return _storage._bannerType}
    set {_uniqueStorage()._bannerType = newValue}
  }

  var bannerDescription: String {
    get {return _storage._bannerDescription}
    set {_uniqueStorage()._bannerDescription = newValue}
  }

  var urlPath: String {
    get {return _storage._urlPath}
    set {_uniqueStorage()._urlPath = newValue}
  }

  var isActive: Bool {
    get {return _storage._isActive}
    set {_uniqueStorage()._isActive = newValue}
  }

  var district: Int32 {
    get {return _storage._district}
    set {_uniqueStorage()._district = newValue}
  }

  var province: Int32 {
    get {return _storage._province}
    set {_uniqueStorage()._province = newValue}
  }

  var gender: String {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  var minAge: Int32 {
    get {return _storage._minAge}
    set {_uniqueStorage()._minAge = newValue}
  }

  var maxAge: Int32 {
    get {return _storage._maxAge}
    set {_uniqueStorage()._maxAge = newValue}
  }

  var schemeType: String {
    get {return _storage._schemeType}
    set {_uniqueStorage()._schemeType = newValue}
  }

  var redirectLink: String {
    get {return _storage._redirectLink}
    set {_uniqueStorage()._redirectLink = newValue}
  }

  var effectiveDate: Int64 {
    get {return _storage._effectiveDate}
    set {_uniqueStorage()._effectiveDate = newValue}
  }

  var expiryDate: Int64 {
    get {return _storage._expiryDate}
    set {_uniqueStorage()._expiryDate = newValue}
  }

  var isEditable: Bool {
    get {return _storage._isEditable}
    set {_uniqueStorage()._isEditable = newValue}
  }

  var order: Int32 {
    get {return _storage._order}
    set {_uniqueStorage()._order = newValue}
  }

  var redirectType: Int32 {
    get {return _storage._redirectType}
    set {_uniqueStorage()._redirectType = newValue}
  }

  var bankBranchID: String {
    get {return _storage._bankBranchID}
    set {_uniqueStorage()._bankBranchID = newValue}
  }

  var featureKeyword: String {
    get {return _storage._featureKeyword}
    set {_uniqueStorage()._featureKeyword = newValue}
  }

  var profileID: String {
    get {return _storage._profileID}
    set {_uniqueStorage()._profileID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bfi_Banner_BannerDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  var bannerTitle: String {
    get {return _storage._bannerTitle}
    set {_uniqueStorage()._bannerTitle = newValue}
  }

  var interfaceType: String {
    get {return _storage._interfaceType}
    set {_uniqueStorage()._interfaceType = newValue}
  }

  var bannerType: String {
    get {return _storage._bannerType}
    set {_uniqueStorage()._bannerType = newValue}
  }

  var bannerDescription: String {
    get {return _storage._bannerDescription}
    set {_uniqueStorage()._bannerDescription = newValue}
  }

  var urlPath: String {
    get {return _storage._urlPath}
    set {_uniqueStorage()._urlPath = newValue}
  }

  var isActive: Bool {
    get {return _storage._isActive}
    set {_uniqueStorage()._isActive = newValue}
  }

  var isDeleted: Bool {
    get {return _storage._isDeleted}
    set {_uniqueStorage()._isDeleted = newValue}
  }

  var redirectLink: String {
    get {return _storage._redirectLink}
    set {_uniqueStorage()._redirectLink = newValue}
  }

  var effectiveDate: Int64 {
    get {return _storage._effectiveDate}
    set {_uniqueStorage()._effectiveDate = newValue}
  }

  var expiryDate: Int64 {
    get {return _storage._expiryDate}
    set {_uniqueStorage()._expiryDate = newValue}
  }

  var district: Int32 {
    get {return _storage._district}
    set {_uniqueStorage()._district = newValue}
  }

  var province: Int32 {
    get {return _storage._province}
    set {_uniqueStorage()._province = newValue}
  }

  var gender: String {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  var minAge: Int32 {
    get {return _storage._minAge}
    set {_uniqueStorage()._minAge = newValue}
  }

  var maxAge: Int32 {
    get {return _storage._maxAge}
    set {_uniqueStorage()._maxAge = newValue}
  }

  var schemeType: String {
    get {return _storage._schemeType}
    set {_uniqueStorage()._schemeType = newValue}
  }

  var isEditable: Bool {
    get {return _storage._isEditable}
    set {_uniqueStorage()._isEditable = newValue}
  }

  var operationType: String {
    get {return _storage._operationType}
    set {_uniqueStorage()._operationType = newValue}
  }

  var ordering: Int32 {
    get {return _storage._ordering}
    set {_uniqueStorage()._ordering = newValue}
  }

  var redirectType: Int32 {
    get {return _storage._redirectType}
    set {_uniqueStorage()._redirectType = newValue}
  }

  var bankBranchID: String {
    get {return _storage._bankBranchID}
    set {_uniqueStorage()._bankBranchID = newValue}
  }

  var featureKeyword: String {
    get {return _storage._featureKeyword}
    set {_uniqueStorage()._featureKeyword = newValue}
  }

  var profileID: String {
    get {return _storage._profileID}
    set {_uniqueStorage()._profileID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bfi_Banner_BannerList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataList: [Bfi_Banner_BannerDetail] = []

  var meta: Bfi_Common_Meta {
    get {return _meta ?? Bfi_Common_Meta()}
    set {_meta = newValue}
  }
  /// Returns true if `meta` has been explicitly set.
  var hasMeta: Bool {return self._meta != nil}
  /// Clears the value of `meta`. Subsequent reads from it will return its default value.
  mutating func clearMeta() {self._meta = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _meta: Bfi_Common_Meta? = nil
}

struct Bfi_Banner_BannerChangeDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var before: Bfi_Banner_BannerDetail {
    get {return _before ?? Bfi_Banner_BannerDetail()}
    set {_before = newValue}
  }
  /// Returns true if `before` has been explicitly set.
  var hasBefore: Bool {return self._before != nil}
  /// Clears the value of `before`. Subsequent reads from it will return its default value.
  mutating func clearBefore() {self._before = nil}

  var after: Bfi_Banner_BannerDetail {
    get {return _after ?? Bfi_Banner_BannerDetail()}
    set {_after = newValue}
  }
  /// Returns true if `after` has been explicitly set.
  var hasAfter: Bool {return self._after != nil}
  /// Clears the value of `after`. Subsequent reads from it will return its default value.
  mutating func clearAfter() {self._after = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _before: Bfi_Banner_BannerDetail? = nil
  fileprivate var _after: Bfi_Banner_BannerDetail? = nil
}

struct Bfi_Banner_BannerApproveDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Bfi_Banner_BannerChangeDetails {
    get {return _data ?? Bfi_Banner_BannerChangeDetails()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var response: Bfi_Common_Response {
    get {return _response ?? Bfi_Common_Response()}
    set {_response = newValue}
  }
  /// Returns true if `response` has been explicitly set.
  var hasResponse: Bool {return self._response != nil}
  /// Clears the value of `response`. Subsequent reads from it will return its default value.
  mutating func clearResponse() {self._response = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: Bfi_Banner_BannerChangeDetails? = nil
  fileprivate var _response: Bfi_Common_Response? = nil
}

struct Bfi_Banner_GetInterfaceType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataList: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Banner_GetBannerTypeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var configWord: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Banner_GetBannerTypeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataList: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Banner_ImageUrl {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Banner_getFcm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataList: [Bfi_Banner_ImageUrl] = []

  var meta: Bfi_Common_Meta {
    get {return _meta ?? Bfi_Common_Meta()}
    set {_meta = newValue}
  }
  /// Returns true if `meta` has been explicitly set.
  var hasMeta: Bool {return self._meta != nil}
  /// Clears the value of `meta`. Subsequent reads from it will return its default value.
  mutating func clearMeta() {self._meta = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _meta: Bfi_Common_Meta? = nil
}

struct Bfi_Banner_bannerCustomer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var urlPath: String = String()

  var redirectLink: String = String()

  var bannerTitle: String = String()

  var redirectType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Banner_getBannerCustomerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var interfaceType: String = String()

  var bannerType: String = String()

  var effectiveDate: Int64 = 0

  var expiryDate: Int64 = 0

  var redirectType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Banner_getBannerCustomerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataList: [Bfi_Banner_bannerCustomer] = []

  var response: Bfi_Common_Response {
    get {return _response ?? Bfi_Common_Response()}
    set {_response = newValue}
  }
  /// Returns true if `response` has been explicitly set.
  var hasResponse: Bool {return self._response != nil}
  /// Clears the value of `response`. Subsequent reads from it will return its default value.
  mutating func clearResponse() {self._response = nil}

  var configParams: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _response: Bfi_Common_Response? = nil
}

struct Bfi_Banner_bannerAfterLoginCustomer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var urlPath: String = String()

  var redirectLink: String = String()

  var bannerTitle: String = String()

  var redirectType: Int32 = 0

  var featureKeyword: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bfi_Banner_bannerAfterLoginResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataList: [Bfi_Banner_bannerAfterLoginCustomer] = []

  var response: Bfi_Common_Response {
    get {return _response ?? Bfi_Common_Response()}
    set {_response = newValue}
  }
  /// Returns true if `response` has been explicitly set.
  var hasResponse: Bool {return self._response != nil}
  /// Clears the value of `response`. Subsequent reads from it will return its default value.
  mutating func clearResponse() {self._response = nil}

  var configParams: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _response: Bfi_Common_Response? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bfi_Banner_BannerRequest: @unchecked Sendable {}
extension Bfi_Banner_GetBannerRequest: @unchecked Sendable {}
extension Bfi_Banner_ExpiredBannerList: @unchecked Sendable {}
extension Bfi_Banner_getBannerListResponse: @unchecked Sendable {}
extension Bfi_Banner_getBannerByIdRequest: @unchecked Sendable {}
extension Bfi_Banner_bannerByIdResponse: @unchecked Sendable {}
extension Bfi_Banner_modifyBannerRequest: @unchecked Sendable {}
extension Bfi_Banner_deleteBannerRequest: @unchecked Sendable {}
extension Bfi_Banner_list: @unchecked Sendable {}
extension Bfi_Banner_BannerDetail: @unchecked Sendable {}
extension Bfi_Banner_BannerList: @unchecked Sendable {}
extension Bfi_Banner_BannerChangeDetails: @unchecked Sendable {}
extension Bfi_Banner_BannerApproveDetails: @unchecked Sendable {}
extension Bfi_Banner_GetInterfaceType: @unchecked Sendable {}
extension Bfi_Banner_GetBannerTypeRequest: @unchecked Sendable {}
extension Bfi_Banner_GetBannerTypeResponse: @unchecked Sendable {}
extension Bfi_Banner_ImageUrl: @unchecked Sendable {}
extension Bfi_Banner_getFcm: @unchecked Sendable {}
extension Bfi_Banner_bannerCustomer: @unchecked Sendable {}
extension Bfi_Banner_getBannerCustomerRequest: @unchecked Sendable {}
extension Bfi_Banner_getBannerCustomerResponse: @unchecked Sendable {}
extension Bfi_Banner_bannerAfterLoginCustomer: @unchecked Sendable {}
extension Bfi_Banner_bannerAfterLoginResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bfi.banner"

extension Bfi_Banner_BannerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BannerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uuid"),
    3: .same(proto: "bannerTitle"),
    4: .same(proto: "interfaceType"),
    5: .same(proto: "bannerType"),
    6: .same(proto: "bannerDescription"),
    7: .same(proto: "urlPath"),
    8: .same(proto: "ordering"),
    9: .same(proto: "isActive"),
    10: .same(proto: "district"),
    11: .same(proto: "province"),
    12: .same(proto: "gender"),
    13: .same(proto: "minAge"),
    14: .same(proto: "maxAge"),
    15: .same(proto: "schemeType"),
    16: .same(proto: "redirectLink"),
    17: .same(proto: "effectiveDate"),
    18: .same(proto: "expiryDate"),
    19: .same(proto: "redirectType"),
    20: .same(proto: "bankBranchId"),
    21: .same(proto: "featureKeyword"),
    22: .same(proto: "profileId"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _uuid: String = String()
    var _bannerTitle: String = String()
    var _interfaceType: String = String()
    var _bannerType: String = String()
    var _bannerDescription: String = String()
    var _urlPath: String = String()
    var _ordering: Int32 = 0
    var _isActive: Bool = false
    var _district: String = String()
    var _province: String = String()
    var _gender: String = String()
    var _minAge: Int32 = 0
    var _maxAge: Int32 = 0
    var _schemeType: String = String()
    var _redirectLink: String = String()
    var _effectiveDate: String = String()
    var _expiryDate: String = String()
    var _redirectType: Int32 = 0
    var _bankBranchID: String = String()
    var _featureKeyword: String = String()
    var _profileID: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _uuid = source._uuid
      _bannerTitle = source._bannerTitle
      _interfaceType = source._interfaceType
      _bannerType = source._bannerType
      _bannerDescription = source._bannerDescription
      _urlPath = source._urlPath
      _ordering = source._ordering
      _isActive = source._isActive
      _district = source._district
      _province = source._province
      _gender = source._gender
      _minAge = source._minAge
      _maxAge = source._maxAge
      _schemeType = source._schemeType
      _redirectLink = source._redirectLink
      _effectiveDate = source._effectiveDate
      _expiryDate = source._expiryDate
      _redirectType = source._redirectType
      _bankBranchID = source._bankBranchID
      _featureKeyword = source._featureKeyword
      _profileID = source._profileID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._uuid) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._bannerTitle) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._interfaceType) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._bannerType) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._bannerDescription) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._urlPath) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._ordering) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._isActive) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._district) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._province) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._gender) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._minAge) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._maxAge) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._schemeType) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._redirectLink) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._effectiveDate) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._expiryDate) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._redirectType) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._bankBranchID) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._featureKeyword) }()
        case 22: try { try decoder.decodeRepeatedStringField(value: &_storage._profileID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 2)
      }
      if !_storage._bannerTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerTitle, fieldNumber: 3)
      }
      if !_storage._interfaceType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._interfaceType, fieldNumber: 4)
      }
      if !_storage._bannerType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerType, fieldNumber: 5)
      }
      if !_storage._bannerDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerDescription, fieldNumber: 6)
      }
      if !_storage._urlPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._urlPath, fieldNumber: 7)
      }
      if _storage._ordering != 0 {
        try visitor.visitSingularInt32Field(value: _storage._ordering, fieldNumber: 8)
      }
      if _storage._isActive != false {
        try visitor.visitSingularBoolField(value: _storage._isActive, fieldNumber: 9)
      }
      if !_storage._district.isEmpty {
        try visitor.visitSingularStringField(value: _storage._district, fieldNumber: 10)
      }
      if !_storage._province.isEmpty {
        try visitor.visitSingularStringField(value: _storage._province, fieldNumber: 11)
      }
      if !_storage._gender.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gender, fieldNumber: 12)
      }
      if _storage._minAge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._minAge, fieldNumber: 13)
      }
      if _storage._maxAge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxAge, fieldNumber: 14)
      }
      if !_storage._schemeType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._schemeType, fieldNumber: 15)
      }
      if !_storage._redirectLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._redirectLink, fieldNumber: 16)
      }
      if !_storage._effectiveDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._effectiveDate, fieldNumber: 17)
      }
      if !_storage._expiryDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._expiryDate, fieldNumber: 18)
      }
      if _storage._redirectType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._redirectType, fieldNumber: 19)
      }
      if !_storage._bankBranchID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bankBranchID, fieldNumber: 20)
      }
      if !_storage._featureKeyword.isEmpty {
        try visitor.visitSingularStringField(value: _storage._featureKeyword, fieldNumber: 21)
      }
      if !_storage._profileID.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._profileID, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_BannerRequest, rhs: Bfi_Banner_BannerRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._bannerTitle != rhs_storage._bannerTitle {return false}
        if _storage._interfaceType != rhs_storage._interfaceType {return false}
        if _storage._bannerType != rhs_storage._bannerType {return false}
        if _storage._bannerDescription != rhs_storage._bannerDescription {return false}
        if _storage._urlPath != rhs_storage._urlPath {return false}
        if _storage._ordering != rhs_storage._ordering {return false}
        if _storage._isActive != rhs_storage._isActive {return false}
        if _storage._district != rhs_storage._district {return false}
        if _storage._province != rhs_storage._province {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._minAge != rhs_storage._minAge {return false}
        if _storage._maxAge != rhs_storage._maxAge {return false}
        if _storage._schemeType != rhs_storage._schemeType {return false}
        if _storage._redirectLink != rhs_storage._redirectLink {return false}
        if _storage._effectiveDate != rhs_storage._effectiveDate {return false}
        if _storage._expiryDate != rhs_storage._expiryDate {return false}
        if _storage._redirectType != rhs_storage._redirectType {return false}
        if _storage._bankBranchID != rhs_storage._bankBranchID {return false}
        if _storage._featureKeyword != rhs_storage._featureKeyword {return false}
        if _storage._profileID != rhs_storage._profileID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_GetBannerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetBannerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uuid"),
    3: .same(proto: "bannerTitle"),
    4: .same(proto: "interfaceType"),
    5: .same(proto: "bannerType"),
    6: .same(proto: "bannerDescription"),
    7: .same(proto: "urlPath"),
    8: .same(proto: "ordering"),
    9: .same(proto: "isActive"),
    10: .same(proto: "district"),
    11: .same(proto: "province"),
    12: .same(proto: "gender"),
    13: .same(proto: "minAge"),
    14: .same(proto: "maxAge"),
    15: .same(proto: "schemeType"),
    16: .same(proto: "redirectLink"),
    17: .same(proto: "effectiveDate"),
    18: .same(proto: "expiryDate"),
    19: .same(proto: "redirectType"),
    20: .same(proto: "bankBranchId"),
    21: .same(proto: "featureKeyword"),
    22: .same(proto: "profileId"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _uuid: String = String()
    var _bannerTitle: String = String()
    var _interfaceType: String = String()
    var _bannerType: String = String()
    var _bannerDescription: String = String()
    var _urlPath: String = String()
    var _ordering: Int32 = 0
    var _isActive: Bool = false
    var _district: String = String()
    var _province: String = String()
    var _gender: String = String()
    var _minAge: Int32 = 0
    var _maxAge: Int32 = 0
    var _schemeType: String = String()
    var _redirectLink: String = String()
    var _effectiveDate: String = String()
    var _expiryDate: String = String()
    var _redirectType: Int32 = 0
    var _bankBranchID: String = String()
    var _featureKeyword: String = String()
    var _profileID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _uuid = source._uuid
      _bannerTitle = source._bannerTitle
      _interfaceType = source._interfaceType
      _bannerType = source._bannerType
      _bannerDescription = source._bannerDescription
      _urlPath = source._urlPath
      _ordering = source._ordering
      _isActive = source._isActive
      _district = source._district
      _province = source._province
      _gender = source._gender
      _minAge = source._minAge
      _maxAge = source._maxAge
      _schemeType = source._schemeType
      _redirectLink = source._redirectLink
      _effectiveDate = source._effectiveDate
      _expiryDate = source._expiryDate
      _redirectType = source._redirectType
      _bankBranchID = source._bankBranchID
      _featureKeyword = source._featureKeyword
      _profileID = source._profileID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._uuid) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._bannerTitle) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._interfaceType) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._bannerType) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._bannerDescription) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._urlPath) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._ordering) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._isActive) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._district) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._province) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._gender) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._minAge) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._maxAge) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._schemeType) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._redirectLink) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._effectiveDate) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._expiryDate) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._redirectType) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._bankBranchID) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._featureKeyword) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._profileID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 2)
      }
      if !_storage._bannerTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerTitle, fieldNumber: 3)
      }
      if !_storage._interfaceType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._interfaceType, fieldNumber: 4)
      }
      if !_storage._bannerType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerType, fieldNumber: 5)
      }
      if !_storage._bannerDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerDescription, fieldNumber: 6)
      }
      if !_storage._urlPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._urlPath, fieldNumber: 7)
      }
      if _storage._ordering != 0 {
        try visitor.visitSingularInt32Field(value: _storage._ordering, fieldNumber: 8)
      }
      if _storage._isActive != false {
        try visitor.visitSingularBoolField(value: _storage._isActive, fieldNumber: 9)
      }
      if !_storage._district.isEmpty {
        try visitor.visitSingularStringField(value: _storage._district, fieldNumber: 10)
      }
      if !_storage._province.isEmpty {
        try visitor.visitSingularStringField(value: _storage._province, fieldNumber: 11)
      }
      if !_storage._gender.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gender, fieldNumber: 12)
      }
      if _storage._minAge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._minAge, fieldNumber: 13)
      }
      if _storage._maxAge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxAge, fieldNumber: 14)
      }
      if !_storage._schemeType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._schemeType, fieldNumber: 15)
      }
      if !_storage._redirectLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._redirectLink, fieldNumber: 16)
      }
      if !_storage._effectiveDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._effectiveDate, fieldNumber: 17)
      }
      if !_storage._expiryDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._expiryDate, fieldNumber: 18)
      }
      if _storage._redirectType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._redirectType, fieldNumber: 19)
      }
      if !_storage._bankBranchID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bankBranchID, fieldNumber: 20)
      }
      if !_storage._featureKeyword.isEmpty {
        try visitor.visitSingularStringField(value: _storage._featureKeyword, fieldNumber: 21)
      }
      if !_storage._profileID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._profileID, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_GetBannerRequest, rhs: Bfi_Banner_GetBannerRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._bannerTitle != rhs_storage._bannerTitle {return false}
        if _storage._interfaceType != rhs_storage._interfaceType {return false}
        if _storage._bannerType != rhs_storage._bannerType {return false}
        if _storage._bannerDescription != rhs_storage._bannerDescription {return false}
        if _storage._urlPath != rhs_storage._urlPath {return false}
        if _storage._ordering != rhs_storage._ordering {return false}
        if _storage._isActive != rhs_storage._isActive {return false}
        if _storage._district != rhs_storage._district {return false}
        if _storage._province != rhs_storage._province {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._minAge != rhs_storage._minAge {return false}
        if _storage._maxAge != rhs_storage._maxAge {return false}
        if _storage._schemeType != rhs_storage._schemeType {return false}
        if _storage._redirectLink != rhs_storage._redirectLink {return false}
        if _storage._effectiveDate != rhs_storage._effectiveDate {return false}
        if _storage._expiryDate != rhs_storage._expiryDate {return false}
        if _storage._redirectType != rhs_storage._redirectType {return false}
        if _storage._bankBranchID != rhs_storage._bankBranchID {return false}
        if _storage._featureKeyword != rhs_storage._featureKeyword {return false}
        if _storage._profileID != rhs_storage._profileID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_ExpiredBannerList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExpiredBannerList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataList"),
    2: .same(proto: "meta"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dataList) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._meta) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dataList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataList, fieldNumber: 1)
    }
    try { if let v = self._meta {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_ExpiredBannerList, rhs: Bfi_Banner_ExpiredBannerList) -> Bool {
    if lhs.dataList != rhs.dataList {return false}
    if lhs._meta != rhs._meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_getBannerListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".getBannerListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataList"),
    2: .same(proto: "meta"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dataList) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._meta) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dataList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataList, fieldNumber: 1)
    }
    try { if let v = self._meta {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_getBannerListResponse, rhs: Bfi_Banner_getBannerListResponse) -> Bool {
    if lhs.dataList != rhs.dataList {return false}
    if lhs._meta != rhs._meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_getBannerByIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".getBannerByIdRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_getBannerByIdRequest, rhs: Bfi_Banner_getBannerByIdRequest) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_bannerByIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".bannerByIdResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "response"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._response) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._response {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_bannerByIdResponse, rhs: Bfi_Banner_bannerByIdResponse) -> Bool {
    if lhs._response != rhs._response {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_modifyBannerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".modifyBannerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uuid"),
    3: .same(proto: "bannerTitle"),
    4: .same(proto: "bannerDescription"),
    5: .same(proto: "urlPath"),
    6: .same(proto: "ordering"),
    7: .same(proto: "isActive"),
    8: .same(proto: "redirectLink"),
    9: .same(proto: "isDeleted"),
    10: .same(proto: "district"),
    11: .same(proto: "province"),
    12: .same(proto: "gender"),
    13: .same(proto: "minAge"),
    14: .same(proto: "maxAge"),
    15: .same(proto: "schemeType"),
    16: .same(proto: "expiryDate"),
    17: .same(proto: "updatedDate"),
    18: .same(proto: "updatedBy"),
    19: .same(proto: "redirectType"),
    20: .same(proto: "bankBranchId"),
    21: .same(proto: "effectiveDate"),
    22: .same(proto: "featureKeyword"),
    23: .same(proto: "profileId"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _uuid: String = String()
    var _bannerTitle: String = String()
    var _bannerDescription: String = String()
    var _urlPath: String = String()
    var _ordering: Int32 = 0
    var _isActive: Bool = false
    var _redirectLink: String = String()
    var _isDeleted: Bool = false
    var _district: Int32 = 0
    var _province: Int32 = 0
    var _gender: String = String()
    var _minAge: Int32 = 0
    var _maxAge: Int32 = 0
    var _schemeType: String = String()
    var _expiryDate: String = String()
    var _updatedDate: Int64 = 0
    var _updatedBy: String = String()
    var _redirectType: Int32 = 0
    var _bankBranchID: String = String()
    var _effectiveDate: String = String()
    var _featureKeyword: String = String()
    var _profileID: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _uuid = source._uuid
      _bannerTitle = source._bannerTitle
      _bannerDescription = source._bannerDescription
      _urlPath = source._urlPath
      _ordering = source._ordering
      _isActive = source._isActive
      _redirectLink = source._redirectLink
      _isDeleted = source._isDeleted
      _district = source._district
      _province = source._province
      _gender = source._gender
      _minAge = source._minAge
      _maxAge = source._maxAge
      _schemeType = source._schemeType
      _expiryDate = source._expiryDate
      _updatedDate = source._updatedDate
      _updatedBy = source._updatedBy
      _redirectType = source._redirectType
      _bankBranchID = source._bankBranchID
      _effectiveDate = source._effectiveDate
      _featureKeyword = source._featureKeyword
      _profileID = source._profileID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._uuid) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._bannerTitle) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._bannerDescription) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._urlPath) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._ordering) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._isActive) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._redirectLink) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._isDeleted) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._district) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._province) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._gender) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._minAge) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._maxAge) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._schemeType) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._expiryDate) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._updatedDate) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._updatedBy) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._redirectType) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._bankBranchID) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._effectiveDate) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._featureKeyword) }()
        case 23: try { try decoder.decodeRepeatedStringField(value: &_storage._profileID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 2)
      }
      if !_storage._bannerTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerTitle, fieldNumber: 3)
      }
      if !_storage._bannerDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerDescription, fieldNumber: 4)
      }
      if !_storage._urlPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._urlPath, fieldNumber: 5)
      }
      if _storage._ordering != 0 {
        try visitor.visitSingularInt32Field(value: _storage._ordering, fieldNumber: 6)
      }
      if _storage._isActive != false {
        try visitor.visitSingularBoolField(value: _storage._isActive, fieldNumber: 7)
      }
      if !_storage._redirectLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._redirectLink, fieldNumber: 8)
      }
      if _storage._isDeleted != false {
        try visitor.visitSingularBoolField(value: _storage._isDeleted, fieldNumber: 9)
      }
      if _storage._district != 0 {
        try visitor.visitSingularInt32Field(value: _storage._district, fieldNumber: 10)
      }
      if _storage._province != 0 {
        try visitor.visitSingularInt32Field(value: _storage._province, fieldNumber: 11)
      }
      if !_storage._gender.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gender, fieldNumber: 12)
      }
      if _storage._minAge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._minAge, fieldNumber: 13)
      }
      if _storage._maxAge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxAge, fieldNumber: 14)
      }
      if !_storage._schemeType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._schemeType, fieldNumber: 15)
      }
      if !_storage._expiryDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._expiryDate, fieldNumber: 16)
      }
      if _storage._updatedDate != 0 {
        try visitor.visitSingularInt64Field(value: _storage._updatedDate, fieldNumber: 17)
      }
      if !_storage._updatedBy.isEmpty {
        try visitor.visitSingularStringField(value: _storage._updatedBy, fieldNumber: 18)
      }
      if _storage._redirectType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._redirectType, fieldNumber: 19)
      }
      if !_storage._bankBranchID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bankBranchID, fieldNumber: 20)
      }
      if !_storage._effectiveDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._effectiveDate, fieldNumber: 21)
      }
      if !_storage._featureKeyword.isEmpty {
        try visitor.visitSingularStringField(value: _storage._featureKeyword, fieldNumber: 22)
      }
      if !_storage._profileID.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._profileID, fieldNumber: 23)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_modifyBannerRequest, rhs: Bfi_Banner_modifyBannerRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._bannerTitle != rhs_storage._bannerTitle {return false}
        if _storage._bannerDescription != rhs_storage._bannerDescription {return false}
        if _storage._urlPath != rhs_storage._urlPath {return false}
        if _storage._ordering != rhs_storage._ordering {return false}
        if _storage._isActive != rhs_storage._isActive {return false}
        if _storage._redirectLink != rhs_storage._redirectLink {return false}
        if _storage._isDeleted != rhs_storage._isDeleted {return false}
        if _storage._district != rhs_storage._district {return false}
        if _storage._province != rhs_storage._province {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._minAge != rhs_storage._minAge {return false}
        if _storage._maxAge != rhs_storage._maxAge {return false}
        if _storage._schemeType != rhs_storage._schemeType {return false}
        if _storage._expiryDate != rhs_storage._expiryDate {return false}
        if _storage._updatedDate != rhs_storage._updatedDate {return false}
        if _storage._updatedBy != rhs_storage._updatedBy {return false}
        if _storage._redirectType != rhs_storage._redirectType {return false}
        if _storage._bankBranchID != rhs_storage._bankBranchID {return false}
        if _storage._effectiveDate != rhs_storage._effectiveDate {return false}
        if _storage._featureKeyword != rhs_storage._featureKeyword {return false}
        if _storage._profileID != rhs_storage._profileID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_deleteBannerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".deleteBannerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_deleteBannerRequest, rhs: Bfi_Banner_deleteBannerRequest) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_list: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".list"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uuid"),
    3: .same(proto: "bannerTitle"),
    4: .same(proto: "interfaceType"),
    5: .same(proto: "bannerType"),
    6: .same(proto: "bannerDescription"),
    7: .same(proto: "urlPath"),
    8: .same(proto: "isActive"),
    9: .same(proto: "district"),
    10: .same(proto: "province"),
    11: .same(proto: "gender"),
    12: .same(proto: "minAge"),
    13: .same(proto: "maxAge"),
    14: .same(proto: "schemeType"),
    15: .same(proto: "redirectLink"),
    16: .same(proto: "effectiveDate"),
    17: .same(proto: "expiryDate"),
    18: .same(proto: "isEditable"),
    19: .same(proto: "order"),
    20: .same(proto: "redirectType"),
    21: .same(proto: "bankBranchId"),
    22: .same(proto: "featureKeyword"),
    23: .same(proto: "profileId"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _uuid: String = String()
    var _bannerTitle: String = String()
    var _interfaceType: String = String()
    var _bannerType: String = String()
    var _bannerDescription: String = String()
    var _urlPath: String = String()
    var _isActive: Bool = false
    var _district: Int32 = 0
    var _province: Int32 = 0
    var _gender: String = String()
    var _minAge: Int32 = 0
    var _maxAge: Int32 = 0
    var _schemeType: String = String()
    var _redirectLink: String = String()
    var _effectiveDate: Int64 = 0
    var _expiryDate: Int64 = 0
    var _isEditable: Bool = false
    var _order: Int32 = 0
    var _redirectType: Int32 = 0
    var _bankBranchID: String = String()
    var _featureKeyword: String = String()
    var _profileID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _uuid = source._uuid
      _bannerTitle = source._bannerTitle
      _interfaceType = source._interfaceType
      _bannerType = source._bannerType
      _bannerDescription = source._bannerDescription
      _urlPath = source._urlPath
      _isActive = source._isActive
      _district = source._district
      _province = source._province
      _gender = source._gender
      _minAge = source._minAge
      _maxAge = source._maxAge
      _schemeType = source._schemeType
      _redirectLink = source._redirectLink
      _effectiveDate = source._effectiveDate
      _expiryDate = source._expiryDate
      _isEditable = source._isEditable
      _order = source._order
      _redirectType = source._redirectType
      _bankBranchID = source._bankBranchID
      _featureKeyword = source._featureKeyword
      _profileID = source._profileID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._uuid) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._bannerTitle) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._interfaceType) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._bannerType) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._bannerDescription) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._urlPath) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._isActive) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._district) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._province) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._gender) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._minAge) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._maxAge) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._schemeType) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._redirectLink) }()
        case 16: try { try decoder.decodeSingularInt64Field(value: &_storage._effectiveDate) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._expiryDate) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._isEditable) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._order) }()
        case 20: try { try decoder.decodeSingularInt32Field(value: &_storage._redirectType) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._bankBranchID) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._featureKeyword) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._profileID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 2)
      }
      if !_storage._bannerTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerTitle, fieldNumber: 3)
      }
      if !_storage._interfaceType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._interfaceType, fieldNumber: 4)
      }
      if !_storage._bannerType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerType, fieldNumber: 5)
      }
      if !_storage._bannerDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerDescription, fieldNumber: 6)
      }
      if !_storage._urlPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._urlPath, fieldNumber: 7)
      }
      if _storage._isActive != false {
        try visitor.visitSingularBoolField(value: _storage._isActive, fieldNumber: 8)
      }
      if _storage._district != 0 {
        try visitor.visitSingularInt32Field(value: _storage._district, fieldNumber: 9)
      }
      if _storage._province != 0 {
        try visitor.visitSingularInt32Field(value: _storage._province, fieldNumber: 10)
      }
      if !_storage._gender.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gender, fieldNumber: 11)
      }
      if _storage._minAge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._minAge, fieldNumber: 12)
      }
      if _storage._maxAge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxAge, fieldNumber: 13)
      }
      if !_storage._schemeType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._schemeType, fieldNumber: 14)
      }
      if !_storage._redirectLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._redirectLink, fieldNumber: 15)
      }
      if _storage._effectiveDate != 0 {
        try visitor.visitSingularInt64Field(value: _storage._effectiveDate, fieldNumber: 16)
      }
      if _storage._expiryDate != 0 {
        try visitor.visitSingularInt64Field(value: _storage._expiryDate, fieldNumber: 17)
      }
      if _storage._isEditable != false {
        try visitor.visitSingularBoolField(value: _storage._isEditable, fieldNumber: 18)
      }
      if _storage._order != 0 {
        try visitor.visitSingularInt32Field(value: _storage._order, fieldNumber: 19)
      }
      if _storage._redirectType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._redirectType, fieldNumber: 20)
      }
      if !_storage._bankBranchID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bankBranchID, fieldNumber: 21)
      }
      if !_storage._featureKeyword.isEmpty {
        try visitor.visitSingularStringField(value: _storage._featureKeyword, fieldNumber: 22)
      }
      if !_storage._profileID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._profileID, fieldNumber: 23)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_list, rhs: Bfi_Banner_list) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._bannerTitle != rhs_storage._bannerTitle {return false}
        if _storage._interfaceType != rhs_storage._interfaceType {return false}
        if _storage._bannerType != rhs_storage._bannerType {return false}
        if _storage._bannerDescription != rhs_storage._bannerDescription {return false}
        if _storage._urlPath != rhs_storage._urlPath {return false}
        if _storage._isActive != rhs_storage._isActive {return false}
        if _storage._district != rhs_storage._district {return false}
        if _storage._province != rhs_storage._province {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._minAge != rhs_storage._minAge {return false}
        if _storage._maxAge != rhs_storage._maxAge {return false}
        if _storage._schemeType != rhs_storage._schemeType {return false}
        if _storage._redirectLink != rhs_storage._redirectLink {return false}
        if _storage._effectiveDate != rhs_storage._effectiveDate {return false}
        if _storage._expiryDate != rhs_storage._expiryDate {return false}
        if _storage._isEditable != rhs_storage._isEditable {return false}
        if _storage._order != rhs_storage._order {return false}
        if _storage._redirectType != rhs_storage._redirectType {return false}
        if _storage._bankBranchID != rhs_storage._bankBranchID {return false}
        if _storage._featureKeyword != rhs_storage._featureKeyword {return false}
        if _storage._profileID != rhs_storage._profileID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_BannerDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BannerDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uuid"),
    3: .same(proto: "bannerTitle"),
    4: .same(proto: "interfaceType"),
    5: .same(proto: "bannerType"),
    6: .same(proto: "bannerDescription"),
    7: .same(proto: "urlPath"),
    8: .same(proto: "isActive"),
    9: .same(proto: "isDeleted"),
    10: .same(proto: "redirectLink"),
    11: .same(proto: "effectiveDate"),
    12: .same(proto: "expiryDate"),
    13: .same(proto: "district"),
    14: .same(proto: "province"),
    15: .same(proto: "gender"),
    16: .same(proto: "minAge"),
    17: .same(proto: "maxAge"),
    18: .same(proto: "schemeType"),
    19: .same(proto: "isEditable"),
    20: .same(proto: "operationType"),
    21: .same(proto: "ordering"),
    22: .same(proto: "redirectType"),
    23: .same(proto: "bankBranchId"),
    24: .same(proto: "featureKeyword"),
    25: .same(proto: "profileId"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _uuid: String = String()
    var _bannerTitle: String = String()
    var _interfaceType: String = String()
    var _bannerType: String = String()
    var _bannerDescription: String = String()
    var _urlPath: String = String()
    var _isActive: Bool = false
    var _isDeleted: Bool = false
    var _redirectLink: String = String()
    var _effectiveDate: Int64 = 0
    var _expiryDate: Int64 = 0
    var _district: Int32 = 0
    var _province: Int32 = 0
    var _gender: String = String()
    var _minAge: Int32 = 0
    var _maxAge: Int32 = 0
    var _schemeType: String = String()
    var _isEditable: Bool = false
    var _operationType: String = String()
    var _ordering: Int32 = 0
    var _redirectType: Int32 = 0
    var _bankBranchID: String = String()
    var _featureKeyword: String = String()
    var _profileID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _uuid = source._uuid
      _bannerTitle = source._bannerTitle
      _interfaceType = source._interfaceType
      _bannerType = source._bannerType
      _bannerDescription = source._bannerDescription
      _urlPath = source._urlPath
      _isActive = source._isActive
      _isDeleted = source._isDeleted
      _redirectLink = source._redirectLink
      _effectiveDate = source._effectiveDate
      _expiryDate = source._expiryDate
      _district = source._district
      _province = source._province
      _gender = source._gender
      _minAge = source._minAge
      _maxAge = source._maxAge
      _schemeType = source._schemeType
      _isEditable = source._isEditable
      _operationType = source._operationType
      _ordering = source._ordering
      _redirectType = source._redirectType
      _bankBranchID = source._bankBranchID
      _featureKeyword = source._featureKeyword
      _profileID = source._profileID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._uuid) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._bannerTitle) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._interfaceType) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._bannerType) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._bannerDescription) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._urlPath) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._isActive) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._isDeleted) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._redirectLink) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._effectiveDate) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._expiryDate) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._district) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._province) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._gender) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._minAge) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._maxAge) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._schemeType) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._isEditable) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._operationType) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._ordering) }()
        case 22: try { try decoder.decodeSingularInt32Field(value: &_storage._redirectType) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._bankBranchID) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._featureKeyword) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._profileID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 2)
      }
      if !_storage._bannerTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerTitle, fieldNumber: 3)
      }
      if !_storage._interfaceType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._interfaceType, fieldNumber: 4)
      }
      if !_storage._bannerType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerType, fieldNumber: 5)
      }
      if !_storage._bannerDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerDescription, fieldNumber: 6)
      }
      if !_storage._urlPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._urlPath, fieldNumber: 7)
      }
      if _storage._isActive != false {
        try visitor.visitSingularBoolField(value: _storage._isActive, fieldNumber: 8)
      }
      if _storage._isDeleted != false {
        try visitor.visitSingularBoolField(value: _storage._isDeleted, fieldNumber: 9)
      }
      if !_storage._redirectLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._redirectLink, fieldNumber: 10)
      }
      if _storage._effectiveDate != 0 {
        try visitor.visitSingularInt64Field(value: _storage._effectiveDate, fieldNumber: 11)
      }
      if _storage._expiryDate != 0 {
        try visitor.visitSingularInt64Field(value: _storage._expiryDate, fieldNumber: 12)
      }
      if _storage._district != 0 {
        try visitor.visitSingularInt32Field(value: _storage._district, fieldNumber: 13)
      }
      if _storage._province != 0 {
        try visitor.visitSingularInt32Field(value: _storage._province, fieldNumber: 14)
      }
      if !_storage._gender.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gender, fieldNumber: 15)
      }
      if _storage._minAge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._minAge, fieldNumber: 16)
      }
      if _storage._maxAge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxAge, fieldNumber: 17)
      }
      if !_storage._schemeType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._schemeType, fieldNumber: 18)
      }
      if _storage._isEditable != false {
        try visitor.visitSingularBoolField(value: _storage._isEditable, fieldNumber: 19)
      }
      if !_storage._operationType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._operationType, fieldNumber: 20)
      }
      if _storage._ordering != 0 {
        try visitor.visitSingularInt32Field(value: _storage._ordering, fieldNumber: 21)
      }
      if _storage._redirectType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._redirectType, fieldNumber: 22)
      }
      if !_storage._bankBranchID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bankBranchID, fieldNumber: 23)
      }
      if !_storage._featureKeyword.isEmpty {
        try visitor.visitSingularStringField(value: _storage._featureKeyword, fieldNumber: 24)
      }
      if !_storage._profileID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._profileID, fieldNumber: 25)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_BannerDetail, rhs: Bfi_Banner_BannerDetail) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._bannerTitle != rhs_storage._bannerTitle {return false}
        if _storage._interfaceType != rhs_storage._interfaceType {return false}
        if _storage._bannerType != rhs_storage._bannerType {return false}
        if _storage._bannerDescription != rhs_storage._bannerDescription {return false}
        if _storage._urlPath != rhs_storage._urlPath {return false}
        if _storage._isActive != rhs_storage._isActive {return false}
        if _storage._isDeleted != rhs_storage._isDeleted {return false}
        if _storage._redirectLink != rhs_storage._redirectLink {return false}
        if _storage._effectiveDate != rhs_storage._effectiveDate {return false}
        if _storage._expiryDate != rhs_storage._expiryDate {return false}
        if _storage._district != rhs_storage._district {return false}
        if _storage._province != rhs_storage._province {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._minAge != rhs_storage._minAge {return false}
        if _storage._maxAge != rhs_storage._maxAge {return false}
        if _storage._schemeType != rhs_storage._schemeType {return false}
        if _storage._isEditable != rhs_storage._isEditable {return false}
        if _storage._operationType != rhs_storage._operationType {return false}
        if _storage._ordering != rhs_storage._ordering {return false}
        if _storage._redirectType != rhs_storage._redirectType {return false}
        if _storage._bankBranchID != rhs_storage._bankBranchID {return false}
        if _storage._featureKeyword != rhs_storage._featureKeyword {return false}
        if _storage._profileID != rhs_storage._profileID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_BannerList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BannerList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataList"),
    2: .same(proto: "meta"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dataList) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._meta) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dataList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataList, fieldNumber: 1)
    }
    try { if let v = self._meta {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_BannerList, rhs: Bfi_Banner_BannerList) -> Bool {
    if lhs.dataList != rhs.dataList {return false}
    if lhs._meta != rhs._meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_BannerChangeDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BannerChangeDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "before"),
    2: .same(proto: "after"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._before) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._after) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._before {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._after {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_BannerChangeDetails, rhs: Bfi_Banner_BannerChangeDetails) -> Bool {
    if lhs._before != rhs._before {return false}
    if lhs._after != rhs._after {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_BannerApproveDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BannerApproveDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._response) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._response {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_BannerApproveDetails, rhs: Bfi_Banner_BannerApproveDetails) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs._response != rhs._response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_GetInterfaceType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetInterfaceType"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataList"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.dataList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.dataList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_GetInterfaceType, rhs: Bfi_Banner_GetInterfaceType) -> Bool {
    if lhs.dataList != rhs.dataList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_GetBannerTypeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetBannerTypeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "configWord"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.configWord) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.configWord.isEmpty {
      try visitor.visitSingularStringField(value: self.configWord, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_GetBannerTypeRequest, rhs: Bfi_Banner_GetBannerTypeRequest) -> Bool {
    if lhs.configWord != rhs.configWord {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_GetBannerTypeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetBannerTypeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataList"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.dataList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.dataList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_GetBannerTypeResponse, rhs: Bfi_Banner_GetBannerTypeResponse) -> Bool {
    if lhs.dataList != rhs.dataList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_ImageUrl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageUrl"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_ImageUrl, rhs: Bfi_Banner_ImageUrl) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_getFcm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".getFcm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataList"),
    2: .same(proto: "meta"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dataList) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._meta) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dataList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataList, fieldNumber: 1)
    }
    try { if let v = self._meta {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_getFcm, rhs: Bfi_Banner_getFcm) -> Bool {
    if lhs.dataList != rhs.dataList {return false}
    if lhs._meta != rhs._meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_bannerCustomer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".bannerCustomer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "urlPath"),
    2: .same(proto: "redirectLink"),
    3: .same(proto: "bannerTitle"),
    4: .same(proto: "redirectType"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.urlPath) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.redirectLink) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.bannerTitle) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.redirectType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.urlPath.isEmpty {
      try visitor.visitSingularStringField(value: self.urlPath, fieldNumber: 1)
    }
    if !self.redirectLink.isEmpty {
      try visitor.visitSingularStringField(value: self.redirectLink, fieldNumber: 2)
    }
    if !self.bannerTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.bannerTitle, fieldNumber: 3)
    }
    if self.redirectType != 0 {
      try visitor.visitSingularInt32Field(value: self.redirectType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_bannerCustomer, rhs: Bfi_Banner_bannerCustomer) -> Bool {
    if lhs.urlPath != rhs.urlPath {return false}
    if lhs.redirectLink != rhs.redirectLink {return false}
    if lhs.bannerTitle != rhs.bannerTitle {return false}
    if lhs.redirectType != rhs.redirectType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_getBannerCustomerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".getBannerCustomerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "interfaceType"),
    2: .same(proto: "bannerType"),
    3: .same(proto: "effectiveDate"),
    4: .same(proto: "expiryDate"),
    5: .same(proto: "redirectType"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.interfaceType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.bannerType) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.effectiveDate) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.expiryDate) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.redirectType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.interfaceType.isEmpty {
      try visitor.visitSingularStringField(value: self.interfaceType, fieldNumber: 1)
    }
    if !self.bannerType.isEmpty {
      try visitor.visitSingularStringField(value: self.bannerType, fieldNumber: 2)
    }
    if self.effectiveDate != 0 {
      try visitor.visitSingularInt64Field(value: self.effectiveDate, fieldNumber: 3)
    }
    if self.expiryDate != 0 {
      try visitor.visitSingularInt64Field(value: self.expiryDate, fieldNumber: 4)
    }
    if self.redirectType != 0 {
      try visitor.visitSingularInt32Field(value: self.redirectType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_getBannerCustomerRequest, rhs: Bfi_Banner_getBannerCustomerRequest) -> Bool {
    if lhs.interfaceType != rhs.interfaceType {return false}
    if lhs.bannerType != rhs.bannerType {return false}
    if lhs.effectiveDate != rhs.effectiveDate {return false}
    if lhs.expiryDate != rhs.expiryDate {return false}
    if lhs.redirectType != rhs.redirectType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_getBannerCustomerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".getBannerCustomerResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataList"),
    2: .same(proto: "response"),
    3: .same(proto: "configParams"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dataList) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._response) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.configParams) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dataList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataList, fieldNumber: 1)
    }
    try { if let v = self._response {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.configParams.isEmpty {
      try visitor.visitSingularStringField(value: self.configParams, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_getBannerCustomerResponse, rhs: Bfi_Banner_getBannerCustomerResponse) -> Bool {
    if lhs.dataList != rhs.dataList {return false}
    if lhs._response != rhs._response {return false}
    if lhs.configParams != rhs.configParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_bannerAfterLoginCustomer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".bannerAfterLoginCustomer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "urlPath"),
    2: .same(proto: "redirectLink"),
    3: .same(proto: "bannerTitle"),
    4: .same(proto: "redirectType"),
    5: .same(proto: "featureKeyword"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.urlPath) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.redirectLink) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.bannerTitle) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.redirectType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.featureKeyword) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.urlPath.isEmpty {
      try visitor.visitSingularStringField(value: self.urlPath, fieldNumber: 1)
    }
    if !self.redirectLink.isEmpty {
      try visitor.visitSingularStringField(value: self.redirectLink, fieldNumber: 2)
    }
    if !self.bannerTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.bannerTitle, fieldNumber: 3)
    }
    if self.redirectType != 0 {
      try visitor.visitSingularInt32Field(value: self.redirectType, fieldNumber: 4)
    }
    if !self.featureKeyword.isEmpty {
      try visitor.visitSingularStringField(value: self.featureKeyword, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_bannerAfterLoginCustomer, rhs: Bfi_Banner_bannerAfterLoginCustomer) -> Bool {
    if lhs.urlPath != rhs.urlPath {return false}
    if lhs.redirectLink != rhs.redirectLink {return false}
    if lhs.bannerTitle != rhs.bannerTitle {return false}
    if lhs.redirectType != rhs.redirectType {return false}
    if lhs.featureKeyword != rhs.featureKeyword {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bfi_Banner_bannerAfterLoginResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".bannerAfterLoginResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataList"),
    2: .same(proto: "response"),
    3: .same(proto: "configParams"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dataList) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._response) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.configParams) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dataList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataList, fieldNumber: 1)
    }
    try { if let v = self._response {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.configParams.isEmpty {
      try visitor.visitSingularStringField(value: self.configParams, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bfi_Banner_bannerAfterLoginResponse, rhs: Bfi_Banner_bannerAfterLoginResponse) -> Bool {
    if lhs.dataList != rhs.dataList {return false}
    if lhs._response != rhs._response {return false}
    if lhs.configParams != rhs.configParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
